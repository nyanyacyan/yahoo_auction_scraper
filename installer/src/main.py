# ==========================================================
# import（標準、プロジェクト内モジュール）  # 以降で使うモジュール群を読み込む

import sys  # 標準モジュール。モジュール検索パス(sys.path)など実行環境の操作に使う
from pathlib import Path  # ファイル/ディレクトリ操作をオブジェクト指向的に扱うための標準ライブラリ
    # 空行: import セクションと設定セクションの区切りとして入れて読みやすさを保つ

# プロジェクトルートをパスに追加（main.py が installer/src/ 配下にある想定で2階層上）
sys.path.insert(0, str(Path(__file__).resolve().parents[2]))  # このファイルの場所から2つ上のディレクトリを文字列化し、モジュール検索パスの先頭に追加する
from installer.src.flow.main_flow import MainFlow, Config  # noqa: E402  # 上でsys.pathを操作した後にimportするため、import位置のlint警告(E402)を明示的に無視
    # 空行: import と関数定義の境界を明確にして可読性を上げる


# ==========================================================
# 関数定義

def main() -> None:  # エントリーポイント関数。戻り値は無いことを型ヒントで示す
    flow = MainFlow(Config())  # 設定オブジェクトを生成してMainFlowに渡し、処理フローのインスタンスを作る
    flow.run()  # 全体の処理を開始するメソッドを呼び出す（実際の業務ロジックはMainFlow側）
    # 空行: 関数定義部と実行トリガ部分の区切り


if __name__ == "__main__":  # スクリプトが「直接実行」された場合のみ下の処理を実行するための慣用句
    main()  # 上で定義したmain()を呼び出してプログラムを開始する
