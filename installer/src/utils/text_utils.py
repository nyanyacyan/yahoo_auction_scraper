# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$%$$$$$$$$$$$$$$$$$$$
# import
import re                           # 正規表現（ct直前の数値を抜き出すために使用）
import logging                      # ログ出力（エラーや進捗を残す用途）
logger = logging.getLogger(__name__) # このモジュール専用のロガーインスタンス取得
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

# **********************************************************************************
# class定義
class NumExtractor:
    """
    商品タイトルなどのテキストから「ct」直前の数値（カラット数）を抽出するためのユーティリティクラス
    - 静的メソッドで提供
    """

    # ------------------------------------------------------------------------------
    # 関数定義
    @staticmethod
    def extract_ct_value(text: str) -> float:
        """
        商品タイトルなどの文字列から「ct」直前の数値（小数を含む）を抽出し、float型で返す

        Args:
            text (str): 対象文字列（例: "ダイヤ 0.52ct VS1", "【0.4ct】..."）

        Returns:
            float: 抽出した数値（例: 0.52, 1.08, 0.4）

        Raises:
            ValueError: 数値が抽出できなかった場合（ctが含まれていない場合や不正なフォーマット時）
        """
        try:
            # 「ct」直前の数値（例: 0.52ct, 1.08 ct, 【0.4ct】など）を抽出する正規表現パターン
            pattern = r'([0-9]+(?:\.[0-9]+)?)\s*ct'
            # パターンにマッチするすべての数値をリストで取得
            # re.IGNORECASEを指定することで「CT」「Ct」などの大文字小文字も区別しない
            matches = re.findall(pattern, text, re.IGNORECASE)
            # マッチがなければエラー（"ct"がない、数値の直前に"ct"がない、など）
            if not matches:
                raise ValueError(f"'ct'直前の数値が見つかりません: {text}")

            # 複数マッチした場合は「最後に出現した値」（[-1]）をfloatに変換して返す
            # 例: "【0.25ct】ダイヤ0.18ctリング" → 0.18ct（最も右側のct）
            ct_value = float(matches[-1])
            return ct_value

        except Exception as e:
            # 何らかの例外時は詳細をログ出力し、再度例外として上位に伝播
            logger.error(f"ct数値抽出エラー: {e} | text='{text}'")
            raise
# **********************************************************************************